{
  "version": 3,
  "sources": ["../lib/odd_positive_integers.json", "../lib/even_nonnegative_integers.json", "../lib/bernoulli.json", "../lib/rational_p1q1.js", "../lib/rational_p2q2.js", "../lib/rational_p3q3.js", "../lib/rational_p4q4.js", "../lib/rational_p5q5.js", "../lib/rational_p6q6.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["[\n\t1.202056903159594285399738161511449990764986292340498881792,\n\t1.036927755143369926331365486457034168057080919501912811974,\n\t1.008349277381922826839797549849796759599863560565238706417,\n\t1.002008392826082214417852769232412060485605851394888756548,\n\t1.000494188604119464558702282526469936468606435758208617119,\n\t1.000122713347578489146751836526357395714275105895509845136,\n\t1.000030588236307020493551728510645062587627948706858177506,\n\t1.000007637197637899762273600293563029213088249090262679095,\n\t1.000001908212716553938925656957795101353258571144838630235,\n\t1.000000476932986787806463116719604373045966446694784937600,\n\t1.000000119219925965311073067788718882326387254997784519858,\n\t1.000000029803503514652280186063705069366011844730919543312,\n\t1.000000007450711789835429491981004170604119454719031882565,\n\t1.000000001862659723513049006403909945416948061665330469200,\n\t1.000000000465662906503378407298923325122007106269185336947,\n\t1.000000000116415501727005197759297383545630951652247172763,\n\t1.000000000029103850444970996869294252278840464106981987433,\n\t1.000000000007275959835057481014520869012338059264850925555,\n\t1.000000000001818989650307065947584832100730085030589309618,\n\t1.000000000000454747378304215402679911202948857033904529911,\n\t1.000000000000113686840768022784934910483802590643743590284,\n\t1.000000000000028421709768893018554550737049426620743688265,\n\t1.000000000000007105427395210852712877354479956800022742043,\n\t1.000000000000001776356843579120327473349014400279570155508,\n\t1.000000000000000444089210314381336419777094026812133645960,\n\t1.000000000000000111022302514106613372054456992138270248322,\n\t1.000000000000000027755575621361241725816324538540697689849,\n\t1.000000000000000006938893904544153697446085326249809274836,\n\t1.000000000000000001734723476047576572048972969937595907478,\n\t1.000000000000000000433680869002065048749702356590624136125,\n\t1.000000000000000000108420217249424140630127111654613825894,\n\t1.000000000000000000027105054312234688319546213119497764319,\n\t1.000000000000000000006776263578045189097995298741556686206,\n\t1.000000000000000000001694065894509799165406492747124861940,\n\t1.000000000000000000000423516473627283334786227048335793441,\n\t1.000000000000000000000105879118406802338522650015392383985,\n\t1.000000000000000000000026469779601698529611341166842038716,\n\t1.000000000000000000000006617444900424404067355245332308220,\n\t1.000000000000000000000001654361225106075646229923677181049,\n\t1.000000000000000000000000413590306276516092600938245550814,\n\t1.000000000000000000000000103397576569128709932840955917459,\n\t1.000000000000000000000000025849394142282142681277617708450,\n\t1.000000000000000000000000006462348535570531803438002161122,\n\t1.000000000000000000000000001615587133892632521206011405705,\n\t1.000000000000000000000000000403896783473158082562226281299,\n\t1.000000000000000000000000000100974195868289515336192507001,\n\t1.000000000000000000000000000025243548967072378244674341938,\n\t1.000000000000000000000000000006310887241768094495682609394,\n\t1.000000000000000000000000000001577721810442023616644432783,\n\t1.000000000000000000000000000000394430452610505903352639355,\n\t1.000000000000000000000000000000098607613152626475748329968,\n\t1.000000000000000000000000000000024651903288156618927101395,\n\t1.000000000000000000000000000000006162975822039154730666338,\n\t1.000000000000000000000000000000001540743955509788682543361,\n\t1.000000000000000000000000000000000385185988877447170622149,\n\t1.000000000000000000000000000000000096296497219361792654016\n]\n", "[\n\t-0.5,\n\t1.644934066848226436472415166646025189218949901206798437735,\n\t1.082323233711138191516003696541167902774750951918726907682,\n\t1.017343061984449139714517929790920527901817490032853561842,\n\t1.004077356197944339378685238508652465258960790649850020329,\n\t1.000994575127818085337145958900319017006019531564477517257,\n\t1.000246086553308048298637998047739670960416088458003404533,\n\t1.000061248135058704829258545105135333747481696169154549482,\n\t1.000015282259408651871732571487636722023237388990471531153,\n\t1.000003817293264999839856461644621939730454697218953331143,\n\t1.000000953962033872796113152038683449345943794187410595750,\n\t1.000000238450502727732990003648186752994935041821779658269,\n\t1.000000059608189051259479612440207935801227503918837302795,\n\t1.000000014901554828365041234658506630698628864788167885910,\n\t1.000000003725334024788457054819204018402423232893059295811,\n\t1.000000000931327432419668182871764735021219813567955136816,\n\t1.000000000232831183367650549200145597594049502482982284530,\n\t1.000000000058207720879027008892436859891063054173122604617,\n\t1.000000000014551921891041984235929632245318420983808894124,\n\t1.000000000003637979547378651190237236355873273512646028384,\n\t1.000000000000909494784026388928253311838694908753860000990,\n\t1.000000000000227373684582465251522682157797869121382982198,\n\t1.000000000000056843419876275856092771829675240685530571588,\n\t1.000000000000014210854828031606769834307141739537678698605,\n\t1.000000000000003552713691337113673298469534059342992145655,\n\t1.000000000000000888178421093081590309609138639138632560887,\n\t1.000000000000000222044605079804198399932009420465396423665,\n\t1.000000000000000055511151248454812437237365905094302816723\n]\n", "[1.00000000000000000000000000000000000000000,\n0.166666666666666666666666666666666666666667,\n-0.0333333333333333333333333333333333333333333,\n0.0238095238095238095238095238095238095238095,\n-0.0333333333333333333333333333333333333333333,\n0.0757575757575757575757575757575757575757576,\n-0.253113553113553113553113553113553113553114,\n1.16666666666666666666666666666666666666667,\n-7.09215686274509803921568627450980392156863,\n54.9711779448621553884711779448621553884712,\n-529.124242424242424242424242424242424242424,\n6192.12318840579710144927536231884057971014,\n-86580.2531135531135531135531135531135531136,\n1.42551716666666666666666666666666666666667e6,\n-2.72982310678160919540229885057471264367816e7,\n6.01580873900642368384303868174835916771401e8,\n-1.51163157670921568627450980392156862745098e10,\n4.29614643061166666666666666666666666666667e11,\n-1.37116552050883327721590879485616327721591e13,\n4.88332318973593166666666666666666666666667e14,\n-1.92965793419400681486326681448632668144863e16,\n8.41693047573682615000553709856035437430786e17,\n-4.03380718540594554130768115942028985507246e19,\n2.11507486380819916056014539007092198581560e21,\n-1.20866265222965259346027311937082525317819e23,\n7.50086674607696436685572007575757575757576e24,\n-5.03877810148106891413789303052201257861635e26,\n3.65287764848181233351104308429711779448622e28,\n-2.84987693024508822262691464329106781609195e30,\n2.38654274996836276446459819192192149717514e32,\n-2.13999492572253336658107447651910973926742e34,\n2.05009757234780975699217330956723102516667e36,\n-2.09380059113463784090951852900279701847092e38,\n2.27526964884635155596492603527692645814700e40,\n-2.62577102862395760473030497361582020814490e42,\n3.21250821027180325182047923042649852435219e44,\n-4.15982781667947109139170744952623589366896e46,\n5.69206954820352800238834562191210586444805e48,\n-8.21836294197845756922906534686173330145509e50,\n1.25029043271669930167323398297028955241772e53,\n-2.00155832332483702749253291988132987687242e55,\n3.36749829153643742333966769033387530162196e57,\n-5.94709705031354477186604968440515408405791e59,\n1.10119103236279775595641307904376916046305e62,\n-2.13552595452535011886583850190410656789733e64,\n4.33288969866411924196166130593792062184514e66,\n-9.18855282416693282262005552155018971389604e68,\n2.03468967763290744934550279902200200659751e71,\n-4.70038339580357310785752555350060606545967e73,\n1.13180434454842492706751862577339342678904e76,\n-2.83822495706937069592641563364817647382847e78,\n7.40642489796788506297508271409209841768797e80,\n-2.00964548027566044834656196727153631868673e83,\n5.66571700508059414457193460305193569614195e85,\n-1.65845111541362169158237133743199123014950e88,\n5.03688599504923774192894219151801548124424e90,\n-1.58614682376581863693634015729664387827410e93,\n5.17567436175456269840732406825071225612408e95,\n-1.74889218402171173396900258776181591451415e98,\n6.11605199949521852558245252642641677807677e100,\n-2.21227769127078349422883234567129324455732e103,\n8.27227767987709698542210624599845957312047e105,\n-3.19589251114157095835916343691808148735263e108,\n1.27500822233877929823100243029266798669572e111,\n-5.25009230867741338994028246245651754469199e113,\n2.23018178942416252098692981988387281437383e116,\n-9.76845219309552044386335133989802393011669e118,\n4.40983619784529542722726228748131691918758e121,\n-2.05085708864640888397293377275830154864566e124,\n9.82144332797912771075729696020975210414919e126,\n-4.84126007982088805087891967099634127611305e129,\n2.45530888014809826097834674040886903996737e132,\n-1.28069268040847475487825132786017857218118e135,\n6.86761671046685811921018885984644004360924e137,\n-3.78464685819691046949789954163795568144895e140,\n2.14261012506652915508713231351482720966602e143,\n-1.24567271371836950070196429616376072194583e146,\n7.43457875510001525436796683940520613117807e148,\n-4.55357953046417048940633332233212748767721e151,\n2.86121128168588683453638472510172325229190e154,\n-1.84377235520338697276882026536287854875414e157,\n1.21811545362210466995013165065995213558174e160,\n-8.24821871853141215484818457296893447301419e162,\n5.72258779378329433296516498142978615918685e165,\n-4.06685305250591047267679693831158655602196e168,\n2.95960920646420500628752695815851870426379e171,\n-2.20495225651894575090311752273445984836379e174,\n1.68125970728895998058311525151360665754464e177,\n-1.31167362135569576486452806355817153004431e180,\n1.04678940094780380821832853929823089643829e183,\n-8.54328935788337077185982546299082774593270e185,\n7.12878213224865423522884066771438224721245e188,\n-6.08029314555358993000847118686477458461988e191,\n5.29967764248499239300942910043247266228490e194,\n-4.71942591687458626443646229013379911103761e197,\n4.29284137914029810894168296541074669045521e200,\n-3.98767449682322074434477655542938795106651e203,\n3.78197804193588827138944181161393327898220e206,\n-3.66142336836811912436858082151197348755196e209,\n3.61760902723728623488554609298914089477541e212,\n-3.64707726451913543621383088655499449048682e215,\n3.75087554364544090983452410104814189306842e218,\n-3.93458672964390282694891288533713429355657e221,\n4.20882111481900820046571171111494898242731e224,\n-4.59022962206179186559802940573325591059371e227,\n5.10317257726295759279198185106496768539760e230,\n-5.78227623036569554015377271242917142512200e233,\n6.67624821678358810322637794412809363451080e236,\n-7.85353076444504163225916259639312444428230e239,\n9.41068940670587255245443288258762485293948e242,\n-1.14849338734651839938498599206805592548354e246,\n1.42729587428487856771416320087122499897180e249,\n-1.80595595869093090142285728117654560926719e252,\n2.32615353076608052161297985184708876161736e255,\n-3.04957517154995947681942819261542593785327e258,\n4.06858060764339734424012124124937318633684e261,\n-5.52310313219743616252320044093186392324280e264,\n7.62772793964343924869949690204961215533859e267,\n-1.07155711196978863132793524001065396932667e271,\n1.53102008959691884453440916153355334355847e274,\n-2.22448916821798346676602348865048510824835e277,\n3.28626791906901391668189736436895275365183e280,\n-4.93559289559603449020711938191575963496999e283,\n7.53495712008325067212266049779283956727824e286,\n-1.16914851545841777278088924731655041783900e290,\n1.84352614678389394126646201597702232396492e293,\n-2.95368261729680829728014917350525183485207e296,\n4.80793212775015697668878704043264072227967e299,\n-7.95021250458852528538243631671158693036798e302,\n1.33527841873546338750122832017820518292039e306]\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function (i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\)).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn 0.2433929443359375;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = 0.2433929443359375 + (x * (-0.4909247051635357 + (x * (0.055761621477604675 + (x * (-0.003209124988790859 + (x * (0.0004515345286457964 + (x * -0.000009332412703570615))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (-0.27996033431034445 + (x * (0.04196762233099861 + (x * (-0.00413421406552171 + (x * (0.00024978985622317937 + (x * -0.000010185578841856403))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = -0.000009332412703570615 + (x * (0.0004515345286457964 + (x * (-0.003209124988790859 + (x * (0.055761621477604675 + (x * (-0.4909247051635357 + (x * 0.2433929443359375))))))))); // eslint-disable-line max-len\n\t\ts2 = -0.000010185578841856403 + (x * (0.00024978985622317937 + (x * (-0.00413421406552171 + (x * (0.04196762233099861 + (x * (-0.27996033431034445 + (x * 1.0))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nmodule.exports = evalrational;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function (i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\)).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn 0.5772156649015329;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = 0.5772156649015329 + (x * (0.24321064694010716 + (x * (0.04173646739882165 + (x * (0.003902520870728433 + (x * (0.0002496063671518772 + (x * 0.00001101084409767329))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (0.29520127712663174 + (x * (0.043460910607305496 + (x * (0.004349305820858264 + (x * (0.0002557842261404885 + (x * 0.000010991819782396113))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 0.00001101084409767329 + (x * (0.0002496063671518772 + (x * (0.003902520870728433 + (x * (0.04173646739882165 + (x * (0.24321064694010716 + (x * 0.5772156649015329))))))))); // eslint-disable-line max-len\n\t\ts2 = 0.000010991819782396113 + (x * (0.0002557842261404885 + (x * (0.004349305820858264 + (x * (0.043460910607305496 + (x * (0.29520127712663174 + (x * 1.0))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nmodule.exports = evalrational;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function (i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\)).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn -0.053725830002359504;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = -0.053725830002359504 + (x * (0.04451634732923656 + (x * (0.012867767353451996 + (x * (0.0009754177045739176 + (x * (0.00007698751015736541 + (x * (0.000003280325100003831 + (x * 0.0))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (0.3338319455303405 + (x * (0.048779843129140764 + (x * (0.0047903970857355845 + (x * (0.00027077670395633634 + (x * (0.000010695186753205734 + (x * 2.3627662397497864e-8))))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 0.0 + (x * (0.000003280325100003831 + (x * (0.00007698751015736541 + (x * (0.0009754177045739176 + (x * (0.012867767353451996 + (x * (0.04451634732923656 + (x * -0.053725830002359504))))))))))); // eslint-disable-line max-len\n\t\ts2 = 2.3627662397497864e-8 + (x * (0.000010695186753205734 + (x * (0.00027077670395633634 + (x * (0.0047903970857355845 + (x * (0.048779843129140764 + (x * (0.3338319455303405 + (x * 1.0))))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nmodule.exports = evalrational;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function (i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\)).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn -2.497101906022594;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = -2.497101906022594 + (x * (-2.600133018094757 + (x * (-0.9392604353771099 + (x * (-0.13844861799574154 + (x * (-0.007017212405498024 + (x * (-0.000022925731059489392 + (x * (0.0 + (x * (0.0 + (x * 0.0))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (0.7060390259377451 + (x * (0.15739599649558628 + (x * (0.010611795097684508 + (x * (-0.000036910273311764616 + (x * (0.0000049340956392759 + (x * (-2.3405548702528722e-7 + (x * (7.188337293654598e-9 + (x * -1.1292001134749475e-10))))))))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 0.0 + (x * (0.0 + (x * (0.0 + (x * (-0.000022925731059489392 + (x * (-0.007017212405498024 + (x * (-0.13844861799574154 + (x * (-0.9392604353771099 + (x * (-2.600133018094757 + (x * -2.497101906022594))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = -1.1292001134749475e-10 + (x * (7.188337293654598e-9 + (x * (-2.3405548702528722e-7 + (x * (0.0000049340956392759 + (x * (-0.000036910273311764616 + (x * (0.010611795097684508 + (x * (0.15739599649558628 + (x * (0.7060390259377451 + (x * 1.0))))))))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nmodule.exports = evalrational;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function (i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\)).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn -4.785580284951356;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = -4.785580284951356 + (x * (-1.8919736488197254 + (x * (-0.21140713487441282 + (x * (-0.0001892047582600767 + (x * (0.0011514092388917874 + (x * (0.00006399492042131645 + (x * (0.000001393489324453249 + (x * (0.0 + (x * 0.0))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (0.24434533737818856 + (x * (0.008733707544922887 + (x * (-0.0011759276533443448 + (x * (-0.00007437436828999331 + (x * (-0.0000021750464515767985 + (x * (4.710012640030765e-9 + (x * (-8.333784406253855e-11 + (x * 6.998415452048457e-13))))))))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = 0.0 + (x * (0.0 + (x * (0.000001393489324453249 + (x * (0.00006399492042131645 + (x * (0.0011514092388917874 + (x * (-0.0001892047582600767 + (x * (-0.21140713487441282 + (x * (-1.8919736488197254 + (x * -4.785580284951356))))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 6.998415452048457e-13 + (x * (-8.333784406253855e-11 + (x * (4.710012640030765e-9 + (x * (-0.0000021750464515767985 + (x * (-0.00007437436828999331 + (x * (-0.0011759276533443448 + (x * (0.008733707544922887 + (x * (0.24434533737818856 + (x * 1.0))))))))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nmodule.exports = evalrational;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a rational function (i.e., the ratio of two polynomials described by the coefficients stored in \\\\(P\\\\) and \\\\(Q\\\\)).\n*\n* ## Notes\n*\n* -   Coefficients should be sorted in ascending degree.\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the rational function\n* @returns {number} evaluated rational function\n*/\nfunction evalrational( x ) {\n\tvar ax;\n\tvar s1;\n\tvar s2;\n\tif ( x === 0.0 ) {\n\t\treturn -10.39489505733089;\n\t}\n\tif ( x < 0.0 ) {\n\t\tax = -x;\n\t} else {\n\t\tax = x;\n\t}\n\tif ( ax <= 1.0 ) {\n\t\ts1 = -10.39489505733089 + (x * (-2.858272196711067 + (x * (-0.34772826653924577 + (x * (-0.025115606465534634 + (x * (-0.001194591734169687 + (x * (-0.00003825293235079675 + (x * (-7.855236337967234e-7 + (x * -8.214657090954655e-9))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 1.0 + (x * (0.2081963335726719 + (x * (0.019568765731720502 + (x * (0.0011107963810248593 + (x * (0.000040850774626603926 + (x * (9.555611230656935e-7 + (x * (1.185071534740229e-8 + (x * 2.226094836273526e-15))))))))))))); // eslint-disable-line max-len\n\t} else {\n\t\tx = 1.0 / x;\n\t\ts1 = -8.214657090954655e-9 + (x * (-7.855236337967234e-7 + (x * (-0.00003825293235079675 + (x * (-0.001194591734169687 + (x * (-0.025115606465534634 + (x * (-0.34772826653924577 + (x * (-2.858272196711067 + (x * -10.39489505733089))))))))))))); // eslint-disable-line max-len\n\t\ts2 = 2.226094836273526e-15 + (x * (1.185071534740229e-8 + (x * (9.555611230656935e-7 + (x * (0.000040850774626603926 + (x * (0.0011107963810248593 + (x * (0.019568765731720502 + (x * (0.2081963335726719 + (x * 1.0))))))))))))); // eslint-disable-line max-len\n\t}\n\treturn s1 / s2;\n}\n\n\n// EXPORTS //\n\nmodule.exports = evalrational;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_85_0/boost/math/special_functions/zeta.hpp}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar isInteger = require( '@stdlib/math-base-assert-is-integer' );\nvar abs = require( '@stdlib/math-base-special-abs' );\nvar exp = require( '@stdlib/math-base-special-exp' );\nvar floor = require( '@stdlib/math-base-special-floor' );\nvar gamma = require( '@stdlib/math-base-special-gamma' );\nvar gammaln = require( '@stdlib/math-base-special-gammaln' );\nvar sinpi = require( '@stdlib/math-base-special-sinpi' );\nvar pow = require( '@stdlib/math-base-special-pow' );\nvar ln = require( '@stdlib/math-base-special-ln' );\nvar PINF = require( '@stdlib/constants-float64-pinf' );\nvar NINF = require( '@stdlib/constants-float64-ninf' );\nvar TWO_PI = require( '@stdlib/constants-float64-two-pi' );\nvar SQRT_EPSILON = require( '@stdlib/constants-float64-sqrt-eps' );\nvar LN_SQRT_TWO_PI = require( '@stdlib/constants-float64-ln-sqrt-two-pi' );\nvar MAX_SAFE_NTH_FACTORIAL = require( '@stdlib/constants-float64-max-safe-nth-factorial' );\nvar ODD_POSITIVE_INTEGERS = require( './odd_positive_integers.json' );\nvar EVEN_NONNEGATIVE_INTEGERS = require( './even_nonnegative_integers.json' );\nvar BERNOULLI = require( './bernoulli.json' );\nvar rateval1 = require( './rational_p1q1.js' );\nvar rateval2 = require( './rational_p2q2.js' );\nvar rateval3 = require( './rational_p3q3.js' );\nvar rateval4 = require( './rational_p4q4.js' );\nvar rateval5 = require( './rational_p5q5.js' );\nvar rateval6 = require( './rational_p6q6.js' );\n\n\n// VARIABLES //\n\nvar MAX_BERNOULLI_2N = 129;\nvar MAX_LN = 709; // TODO: consider making external constant\nvar Y1 = 1.2433929443359375;\nvar Y3 = 0.6986598968505859375;\n\n\n// MAIN //\n\n/**\n* Evaluates the Riemann zeta function.\n*\n* ## Method\n*\n* 1.  First, we use the reflection formula\n*\n*     ```tex\n*     \\zeta(1-s) = 2 \\sin\\biggl(\\frac{\\pi(1-s)}{2}\\biggr)(2\\pi^{-s})\\Gamma(s)\\zeta(s)\n*     ```\n*\n*     to make \\\\(s\\\\) positive.\n*\n* 2.  For \\\\(s \\in (0,1)\\\\), we use the approximation\n*\n*     ```tex\n*     \\zeta(s) = \\frac{C + \\operatorname{R}(1-s) - s}{1-s}\n*     ```\n*\n*     with rational approximation \\\\(\\operatorname{R}(1-z)\\\\) and constant \\\\(C\\\\).\n*\n* 3.  For \\\\(s \\in (1,4)\\\\), we use the approximation\n*\n*     ```tex\n*     \\zeta(s) = C + \\operatorname{R}(s-n) + \\frac{1}{s-1}\n*     ```\n*\n*     with rational approximation \\\\(\\operatorname{R}(z-n)\\\\), constant \\\\(C\\\\), and integer \\\\(n\\\\).\n*\n* 4.  For \\\\(s > 4\\\\), we use the approximation\n*\n*     ```tex\n*     \\zeta(s) = 1 + e^{\\operatorname{R}(z-n)}\n*     ```\n*\n*     with rational approximation \\\\(\\operatorname{R}(z-n)\\\\) and integer \\\\(n\\\\).\n*\n* 5.  For negative odd integers, we use the closed form\n*\n*     ```tex\n*     \\zeta(-n) = \\frac{(-1)^n}{n+1} B_{n+1}\n*     ```\n*\n*     where \\\\(B_{n+1}\\\\) is a Bernoulli number.\n*\n* 6.  For negative even integers, we use the closed form\n*\n*     ```tex\n*     \\zeta(-2n) = 0\n*     ```\n*\n* 7.  For nonnegative even integers, we could use the closed form\n*\n*     ```tex\n*     \\zeta(2n) = \\frac{(-1)^{n-1}2^{2n-1}\\pi^{2n}}{(2n)!} B_{2n}\n*     ```\n*\n*     where \\\\(B_{2n}\\\\) is a Bernoulli number. However, to speed computation, we use precomputed values (Wolfram Alpha).\n*\n* 8.  For positive negative integers, we use precomputed values (Wolfram Alpha), as these values are useful for certain infinite series calculations.\n*\n* ## Notes\n*\n* -   \\\\(\\[\\approx 1.5\\mbox{e-}8, 1)\\\\)\n*\n*     -   max deviation: \\\\(2.020\\mbox{e-}18\\\\)\n*     -   expected error: \\\\(-2.020\\mbox{e-}18\\\\)\n*     -   max error found (double): \\\\(3.994987\\mbox{e-}17\\\\)\n*\n* -   \\\\(\\[1,2\\]\\\\)\n*\n*     -   max deviation: \\\\(9.007\\mbox{e-}20\\\\)\n*     -   expected error: \\\\(9.007\\mbox{e-}20\\\\)\n*\n* -   \\\\((2,4\\]\\\\)\n*\n*     -   max deviation: \\\\(5.946\\mbox{e-}22\\\\)\n*     -   expected error: \\\\(-5.946\\mbox{e-}22\\\\)\n*\n* -   \\\\((4,7\\]\\\\)\n*\n*     -   max deviation: \\\\(2.955\\mbox{e-}17\\\\)\n*     -   expected error: \\\\(2.955\\mbox{e-}17\\\\)\n*     -   max error found (double): \\\\(2.009135\\mbox{e-}16\\\\)\n*\n* -   \\\\((7,15)\\\\)\n*\n*     -   max deviation: \\\\(7.117\\mbox{e-}16\\\\)\n*     -   expected error: \\\\(7.117\\mbox{e-}16\\\\)\n*     -   max error found (double): \\\\(9.387771\\mbox{e-}16\\\\)\n*\n* -   \\\\(\\[15,36)\\\\)\n*\n*     -   max error (in interpolated form): \\\\(1.668\\mbox{e-}17\\\\)\n*     -   max error found (long double): \\\\(1.669714\\mbox{e-}17\\\\)\n*\n* @param {number} s - input value\n* @returns {number} function value\n*\n* @example\n* var v = zeta( 1.1 );\n* // returns ~10.584\n*\n* @example\n* var v = zeta( -4.0 );\n* // returns 0.0\n*\n* @example\n* var v = zeta( 70.0 );\n* // returns 1.0\n*\n* @example\n* var v = zeta( 0.5 );\n* // returns ~-1.46\n*\n* @example\n* var v = zeta( 1.0 ); // pole\n* // returns NaN\n*\n* @example\n* var v = zeta( NaN );\n* // returns NaN\n*/\nfunction zeta( s ) {\n\tvar tmp;\n\tvar sc;\n\tvar as;\n\tvar is;\n\tvar r;\n\tvar n;\n\n\t// Check for `NaN`:\n\tif ( isnan( s ) ) {\n\t\treturn NaN;\n\t}\n\t// Check for a pole:\n\tif ( s === 1.0 ) {\n\t\treturn NaN;\n\t}\n\t// Check for large value:\n\tif ( s >= 56.0 ) {\n\t\treturn 1.0;\n\t}\n\t// Check for a closed form (integers):\n\tif ( isInteger( s ) ) {\n\t\t// Cast `s` to a 32-bit signed integer:\n\t\tis = s|0; // asm type annotation\n\n\t\t// Check that `s` does not exceed MAX_INT32:\n\t\tif ( is === s ) {\n\t\t\tif ( is < 0 ) {\n\t\t\t\tas = (-is)|0; // asm type annotation\n\n\t\t\t\t// Check if even negative integer:\n\t\t\t\tif ( (as&1) === 0 ) {\n\t\t\t\t\treturn 0.0;\n\t\t\t\t}\n\t\t\t\tn = ( (as+1) / 2 )|0; // asm type annotation\n\n\t\t\t\t// Check if less than max Bernoulli number:\n\t\t\t\tif ( n <= MAX_BERNOULLI_2N ) {\n\t\t\t\t\treturn -BERNOULLI[ n ] / (as+1.0);\n\t\t\t\t}\n\t\t\t\t// Fall through...\n\t\t\t}\n\t\t\t// Check if even nonnegative integer:\n\t\t\telse if ( (is&1) === 0 ) {\n\t\t\t\treturn EVEN_NONNEGATIVE_INTEGERS[ is/2 ];\n\t\t\t}\n\t\t\t// Must be a odd positive integer:\n\t\t\telse {\n\t\t\t\treturn ODD_POSITIVE_INTEGERS[ (is-3)/2 ];\n\t\t\t}\n\t\t}\n\t\t// Fall through...\n\t}\n\tif ( abs(s) < SQRT_EPSILON ) {\n\t\treturn -0.5 - (LN_SQRT_TWO_PI * s);\n\t}\n\tsc = 1.0 - s;\n\tif ( s < 0.0 ) {\n\t\t// Check if even negative integer:\n\t\tif ( floor(s/2.0) === s/2.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\t// Swap `s` and `sc`:\n\t\ttmp = s;\n\t\ts = sc;\n\t\tsc = tmp;\n\n\t\t// Determine if computation will overflow:\n\t\tif ( s > MAX_SAFE_NTH_FACTORIAL ) {\n\t\t\ttmp = sinpi( 0.5*sc ) * 2.0 * zeta( s );\n\t\t\tr = gammaln( s );\n\t\t\tr -= s * ln( TWO_PI );\n\t\t\tif ( r > MAX_LN ) {\n\t\t\t\treturn ( tmp < 0.0 ) ? NINF : PINF;\n\t\t\t}\n\t\t\treturn tmp * exp( r );\n\t\t}\n\t\treturn sinpi( 0.5*sc ) * 2.0 * pow( TWO_PI, -s ) * gamma( s ) * zeta( s ); // eslint-disable-line max-len\n\t}\n\tif ( s < 1.0 ) {\n\t\ttmp = rateval1( sc );\n\t\ttmp -= Y1;\n\t\ttmp += sc;\n\t\ttmp /= sc;\n\t\treturn tmp;\n\t}\n\tif ( s <= 2.0 ) {\n\t\tsc = -sc;\n\t\ttmp = 1.0 / sc;\n\t\treturn tmp + rateval2( sc );\n\t}\n\tif ( s <= 4.0 ) {\n\t\ttmp = Y3 + ( 1.0 / (-sc) );\n\t\treturn tmp + rateval3( s-2.0 );\n\t}\n\tif ( s <= 7.0 ) {\n\t\ttmp = rateval4( s-4.0 );\n\t\treturn 1.0 + exp( tmp );\n\t}\n\tif ( s < 15.0 ) {\n\t\ttmp = rateval5( s-7.0 );\n\t\treturn 1.0 + exp( tmp );\n\t}\n\tif ( s < 36.0 ) {\n\t\ttmp = rateval6( s-15.0 );\n\t\treturn 1.0 + exp( tmp );\n\t}\n\t// s < 56\n\treturn 1.0 + pow( 2.0, -s );\n}\n\n\n// EXPORTS //\n\nmodule.exports = zeta;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate the Riemann zeta function.\n*\n* @module @stdlib/math-base-special-riemann-zeta\n*\n* @example\n* var zeta = require( '@stdlib/math-base-special-riemann-zeta' );\n*\n* var v = zeta( 1.1 );\n* // returns ~10.584\n*\n* v = zeta( -4.0 );\n* // returns 0.0\n*\n* v = zeta( 70.0 );\n* // returns 1.0\n*\n* v = zeta( 0.5 );\n* // returns ~-1.46\n*\n* v = zeta( 1.0 ); // pole\n* // returns NaN\n*\n* v = zeta( NaN );\n* // returns NaN\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,GAAAC,EAAA,CAAAA,EAAA,SACC,mBACA,iBACA,kBACA,mBACA,mBACA,mBACA,kBACA,mBACA,mBACA,mBACA,kBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,kBACA,kBACA,mBACA,mBACA,mBACA,kBACA,mBACA,mBACA,mBACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,CACD,ICzDA,IAAAC,EAAAC,EAAA,SAAAC,GAAAC,EAAA,CAAAA,EAAA,SACC,IACA,mBACA,mBACA,mBACA,mBACA,kBACA,kBACA,mBACA,mBACA,kBACA,mBACA,mBACA,kBACA,mBACA,kBACA,mBACA,kBACA,mBACA,kBACA,kBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,CACD,IC7BA,IAAAC,EAAAC,EAAA,SAAAC,GAAAC,EAAA,CAAAA,EAAA,SAAC,EACD,mBACA,oBACA,oBACA,oBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,kBACA,mBACA,qBACA,sBACA,oBACA,sBACA,oBACA,sBACA,oBACA,kBACA,kBACA,qBACA,oBACA,qBACA,mBACA,qBACA,qBACA,qBACA,qBACA,sBACA,qBACA,qBACA,qBACA,sBACA,oBACA,qBACA,oBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,sBACA,qBACA,qBACA,qBACA,qBACA,oBACA,sBACA,oBACA,sBACA,oBACA,sBACA,oBACA,sBACA,qBACA,sBACA,oBACA,sBACA,oBACA,qBACA,qBACA,qBACA,sBACA,qBACA,qBACA,sBACA,qBACA,sBACA,sBACA,uBACA,qBACA,uBACA,qBACA,uBACA,qBACA,uBACA,qBACA,sBACA,sBACA,sBACA,qBACA,uBACA,sBACA,uBACA,oBACA,uBACA,sBACA,sBACA,qBACA,qBACA,qBA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",
  "names": ["require_odd_positive_integers", "__commonJSMin", "exports", "module", "require_even_nonnegative_integers", "__commonJSMin", "exports", "module", "require_bernoulli", "__commonJSMin", "exports", "module", "require_rational_p1q1", "__commonJSMin", "exports", "module", "evalrational", "x", "ax", "s1", "s2", "require_rational_p2q2", "__commonJSMin", "exports", "module", "evalrational", "x", "ax", "s1", "s2", "require_rational_p3q3", "__commonJSMin", "exports", "module", "evalrational", "x", "ax", "s1", "s2", "require_rational_p4q4", "__commonJSMin", "exports", "module", "evalrational", "x", "ax", "s1", "s2", "require_rational_p5q5", "__commonJSMin", "exports", "module", "evalrational", "x", "ax", "s1", "s2", "require_rational_p6q6", "__commonJSMin", "exports", "module", "evalrational", "x", "ax", "s1", "s2", "require_main", "__commonJSMin", "exports", "module", "isnan", "isInteger", "abs", "exp", "floor", "gamma", "gammaln", "sinpi", "pow", "ln", "PINF", "NINF", "TWO_PI", "SQRT_EPSILON", "LN_SQRT_TWO_PI", "MAX_SAFE_NTH_FACTORIAL", "ODD_POSITIVE_INTEGERS", "EVEN_NONNEGATIVE_INTEGERS", "BERNOULLI", "rateval1", "rateval2", "rateval3", "rateval4", "rateval5", "rateval6", "MAX_BERNOULLI_2N", "MAX_LN", "Y1", "Y3", "zeta", "s", "tmp", "sc", "as", "is", "r", "n", "main"]
}
